name: Build and Deploy

on:
  push:
    tags:
      - 'v*.*.*'

env:
  DOCKER_LOGIN: simple2b
  IMAGE_NAME: simple2b/flask-app
  DEPLOY_HOST: ${{ secrets.SSH_HOST_IP_PROD }}
  DEPLOY_USER_NAME: ${{ secrets.SSH_USER }}
  DEPLOY_SSH_KEY: ${{ secrets.SSH_KEY }}
  DEPLOY_SSH_PORT: ${{ secrets.SSH_PORT }}
  DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  on-develop-branch-check:
    runs-on: Linux
    outputs:
      on_develop: ${{ steps.contains_tag.outputs.retval }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: rickstaa/action-contains-tag@v1
        id: contains_tag
        with:
          reference: 'develop'
          tag: '${{ github.ref }}'

  test:
    name: Test
    runs-on: Linux
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
      - name: Setup poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.6.1
      - name: Install dependencies
        working-directory: .
        run: |
          poetry install
      - name: Lint with flake8
        working-directory: .
        run: |
          poetry run flake8 . --count --show-source --statistics
          poetry run flake8 . --count --exit-zero --max-complexity=10 --statistics
      - name: Run mypy
        working-directory: .
        run: |
          poetry run mypy
      - name: Run pytest
        working-directory: .
        run: |
          poetry run pytest test_flask
          poetry run pytest test_api

  build:
    name: Build and Push
    runs-on: Linux
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_LOGIN }}
          password: ${{ env.DOCKER_ACCESS_TOKEN }}
      - name: Build and Push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    name: Deploy to staging
    runs-on: Linux
    needs:
      - on-develop-branch-check
      - build
    if: ${{ needs.on-develop-branch-check.outputs.on_develop == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - name: update compose file
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER_NAME }}
          key: ${{ env.DEPLOY_SSH_KEY }}
          port: ${{ env.DEPLOY_SSH_PORT }}
          source: docker-compose.staging.yaml
          target: ~/app
      - name: deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER_NAME }}
          key: ${{ env.DEPLOY_SSH_KEY }}
          port: ${{ env.DEPLOY_SSH_PORT }}
          script: |
            cd ~/app &&
            mv docker-compose.staging.yaml docker-compose.yaml &&
            docker compose pull &&
            docker compose up -d &&
            docker system prune -f
